// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

typealias Moonbit_Test_Driver_Internal_No_Args_Map = @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (() -> Unit!Error, @moonbitlang/core/builtin.Array[String]),
  ],
]

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = {
  "swisstable_test.mbt": {
    0: (__test_73776973737461626c655f746573742e6d6274_0, ["SwissTable/创建"]),
    1: (__test_73776973737461626c655f746573742e6d6274_1, ["SwissTable/插入和查找"]),
    2: (__test_73776973737461626c655f746573742e6d6274_2, ["SwissTable/更新"]),
    3: (__test_73776973737461626c655f746573742e6d6274_3, ["SwissTable/删除"]),
    4: (__test_73776973737461626c655f746573742e6d6274_4, ["SwissTable/清空"]),
    5: (__test_73776973737461626c655f746573742e6d6274_5, ["SwissTable/从数组创建"]),
    6: (__test_73776973737461626c655f746573742e6d6274_6, ["SwissTable/从固定数组创建"]),
    7: (__test_73776973737461626c655f746573742e6d6274_7, ["SwissTable/迭代"]),
    8: (__test_73776973737461626c655f746573742e6d6274_8, ["SwissTable/自动扩容"]),
    9: (__test_73776973737461626c655f746573742e6d6274_9, ["SwissTable/Robin Hood策略"]),
    10: (__test_73776973737461626c655f746573742e6d6274_10, ["SwissTable/相等性比较"]),
    11: (__test_73776973737461626c655f746573742e6d6274_11, ["SwissTable/不同类型键"]),
    12: (__test_73776973737461626c655f746573742e6d6274_12, ["SwissTable/大数据量"]),
    13: (__test_73776973737461626c655f746573742e6d6274_13, ["SwissTable/操作符"]),
    14: (__test_73776973737461626c655f746573742e6d6274_14, ["SwissTable/打印信息"]),
    15: (__test_73776973737461626c655f746573742e6d6274_15, ["SwissTable/扩容验证"]),
    16: (__test_73776973737461626c655f746573742e6d6274_16, ["SwissTable/极限情况"]),
    17: (__test_73776973737461626c655f746573742e6d6274_17, ["SwissTable/特殊哈希值"]),
    18: (__test_73776973737461626c655f746573742e6d6274_18, ["SwissTable/复杂哈希冲突"]),
    19: (__test_73776973737461626c655f746573742e6d6274_19, ["SwissTable/溢出处理"]),
    20: (__test_73776973737461626c655f746573742e6d6274_20, ["SwissTable/空哈希表"]),
    21: (__test_73776973737461626c655f746573742e6d6274_21, ["SwissTable/删除后重新插入"]),
    22: (__test_73776973737461626c655f746573742e6d6274_22, ["SwissTable/大量删除后重新平衡"]),
    23: (__test_73776973737461626c655f746573742e6d6274_23, ["SwissTable/特殊哈希冲突模式"]),
    24: (__test_73776973737461626c655f746573742e6d6274_24, ["SwissTable/特殊None分支"]),
    25: (__test_73776973737461626c655f746573742e6d6274_25, ["SwissTable/溢出处理边缘情况"]),
    26: (__test_73776973737461626c655f746573742e6d6274_26, ["SwissTable/Robin Hood复杂插入"]),
    27: (__test_73776973737461626c655f746573742e6d6274_27, ["SwissTable/相等性比较复杂情况"]),
    28: (__test_73776973737461626c655f746573742e6d6274_28, ["SwissTable/字符串表示"]),
    29: (__test_73776973737461626c655f746573742e6d6274_29, ["SwissTable/迭代器复杂情况"]),
    30: (__test_73776973737461626c655f746573742e6d6274_30, ["SwissTable/扩容和收缩"]),
    31: (__test_73776973737461626c655f746573742e6d6274_31, ["SwissTable/each 空表"]),
    32: (__test_73776973737461626c655f746573742e6d6274_32, ["SwissTable/eachi 空表"]),
    33: (__test_73776973737461626c655f746573742e6d6274_33, ["SwissTable/to_array 内容"]),
    34: (__test_73776973737461626c655f746573742e6d6274_34, ["SwissTable/字符串表示 空表"]),
    35: (__test_73776973737461626c655f746573742e6d6274_35, ["SwissTable/字符串表示 格式"]),
    36: (__test_73776973737461626c655f746573742e6d6274_36, ["SwissTable/相等性 不同容量"]),
    37: (__test_73776973737461626c655f746573742e6d6274_37, ["SwissTable/None分支处理"]),
    38: (__test_73776973737461626c655f746573742e6d6274_38, ["SwissTable/Robin Hood特殊插入"]),
    39: (__test_73776973737461626c655f746573742e6d6274_39, ["SwissTable/Show实现边缘情况"]),
    40: (__test_73776973737461626c655f746573742e6d6274_40, ["SwissTable/Power2Above边缘情况"]),
    41: (__test_73776973737461626c655f746573742e6d6274_41, ["SwissTable/多次扩容收缩"]),
    42: (__test_73776973737461626c655f746573742e6d6274_42, ["SwissTable/相等性特殊情况"]),
    43: (__test_73776973737461626c655f746573742e6d6274_43, ["SwissTable/操作符详细测试"]),
    44: (__test_73776973737461626c655f746573742e6d6274_44, ["SwissTable/迭代器完整测试"]),
  },
}


pub fn moonbit_test_driver_internal_execute(filename: MoonbitTestDriverInternalExternString, index: Int) -> Unit {
  let file_filter = moonbit_test_driver_internal_get_file_name(filename)
  let index_filter = index
  let filtered_test = match moonbit_test_driver_internal_no_args_tests.get(file_filter) {
    Some(index_func_map) => {
      index_func_map.get(index_filter)
    }
    _ => None
  }
  let mut test_name = ""
  let mut message = ""
  match filtered_test {
    Some(item) => {
      let (func, attrs) = (item.0, item.1)
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        index_filter.to_string()
      } else {
        name
      }
      test_name = name
      try {
        func!()
      } catch {
        Failure(e) | InspectError(e) | SnapshotError(e) => {
          message = e
        }
        e => {
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "internal error: failed to filter test with (\{file_filter}, \{index_filter})" }
  }

  let file_name = file_filter.escape()
  let test_name = test_name.escape()
  let message = message.escape()
  @moonbitlang/core/builtin.println("----- BEGIN MOON TEST RESULT -----")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"0Ayachi0/SwissTable\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("----- END MOON TEST RESULT -----")
}

pub fn moonbit_test_driver_finish() -> Unit {
  
}

fn main {
  ()
}


fn moonbit_test_driver_internal_get_file_name(file_name : MoonbitTestDriverInternalExternString) -> String {
  moonbit_test_driver_internal_string_from_extern(file_name)
}

extern type MoonbitTestDriverInternalStringReadHandle

extern type MoonbitTestDriverInternalExternString

fn moonbit_test_driver_internal_begin_read_string(s : MoonbitTestDriverInternalExternString) -> MoonbitTestDriverInternalStringReadHandle = "__moonbit_fs_unstable" "begin_read_string"

fn moonbit_test_driver_internal_string_read_char(handle : MoonbitTestDriverInternalStringReadHandle) -> Int = "__moonbit_fs_unstable" "string_read_char"

fn moonbit_test_driver_internal_finish_read_string(handle : MoonbitTestDriverInternalStringReadHandle) = "__moonbit_fs_unstable" "finish_read_string"

fn fixedarray_to_bytes(arr : FixedArray[Byte]) -> Bytes = "%identity"

fn moonbit_unsafe_char_from_int(x : Int) -> Char = "%identity"

fn moonbit_test_driver_internal_string_from_extern(e : MoonbitTestDriverInternalExternString) -> String {
  let buf = FixedArray::make(512, Byte::default())
  let mut len = 0
  let handle = moonbit_test_driver_internal_begin_read_string(e)
  while true {
    let ch = moonbit_test_driver_internal_string_read_char(handle)
    if ch == -1 {
      break
    } else {
      let written_bytes_len = buf.set_utf16le_char(len, moonbit_unsafe_char_from_int(ch))
      len += written_bytes_len
    }
  }
  moonbit_test_driver_internal_finish_read_string(handle)
  fixedarray_to_bytes(buf).to_unchecked_string(offset = 0, length = len).to_string()
}
